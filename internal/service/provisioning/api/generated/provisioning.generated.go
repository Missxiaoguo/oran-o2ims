//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for ProvisioningStatusProvisioningPhase.
const (
	Deleting    ProvisioningStatusProvisioningPhase = "deleting"
	Failed      ProvisioningStatusProvisioningPhase = "failed"
	Fulfilled   ProvisioningStatusProvisioningPhase = "fulfilled"
	Pending     ProvisioningStatusProvisioningPhase = "pending"
	Progressing ProvisioningStatusProvisioningPhase = "progressing"
)

// ProvisionedResourceSets The resources that have been successfully provisioned as part of the provisioning process.
type ProvisionedResourceSets struct {
	// NodeClusterId Identifier of the NodeCluster that has been provisioned.
	NodeClusterId *openapi_types.UUID `json:"nodeClusterId,omitempty"`
}

// ProvisioningRequest Information about a provisioning request.
type ProvisioningRequest struct {
	// Description Human readable description of the provisioning request.
	Description string `json:"description"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Provisioning Request.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name Human readable name of the provisioning request.
	Name string `json:"name"`

	// ProvisioningRequestId Identifier for the provisioning request. This identifier is assigned by the SMO.
	ProvisioningRequestId openapi_types.UUID `json:"provisioningRequestId"`

	// Status Status of the provisioning request.
	Status *ProvisioningRequestStatus `json:"status,omitempty"`

	// TemplateName Name of the template used for the provisioning request.
	TemplateName string `json:"templateName"`

	// TemplateParameters Input Parameters that conform to the OpenAPI V3 schema defined in the template.
	TemplateParameters map[string]interface{} `json:"templateParameters"`

	// TemplateVersion Version of the template used for the provisioning request.
	TemplateVersion string `json:"templateVersion"`
}

// ProvisioningRequestStatus Status of the provisioning request.
type ProvisioningRequestStatus struct {
	// ProvisionedResourceSets The resources that have been successfully provisioned as part of the provisioning process.
	ProvisionedResourceSets *ProvisionedResourceSets `json:"provisionedResourceSets,omitempty"`

	// ProvisioningStatus Details about the status of the provisioning request.
	ProvisioningStatus ProvisioningStatus `json:"provisioningStatus"`
}

// ProvisioningStatus Details about the status of the provisioning request.
type ProvisioningStatus struct {
	// Message Message describing the status of the provisioning request.
	Message *string `json:"message,omitempty"`

	// ProvisioningPhase Current state of the provisioning request.
	ProvisioningPhase *ProvisioningStatusProvisioningPhase `json:"provisioningPhase,omitempty"`

	// UpdateTime Timestamp indicating the last time the status of the provisioning request was updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// ProvisioningStatusProvisioningPhase Current state of the provisioning request.
type ProvisioningStatusProvisioningPhase string

// ProvisioningRequestId defines model for provisioningRequestId.
type ProvisioningRequestId = openapi_types.UUID

// GetProvisioningRequestsParams defines parameters for GetProvisioningRequests.
type GetProvisioningRequestsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// CreateProvisioningRequestJSONRequestBody defines body for CreateProvisioningRequest for application/json ContentType.
type CreateProvisioningRequestJSONRequestBody = ProvisioningRequest

// UpdateProvisioningRequestJSONRequestBody defines body for UpdateProvisioningRequest for application/json ContentType.
type UpdateProvisioningRequestJSONRequestBody = ProvisioningRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureProvisioning/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /o2ims-infrastructureProvisioning/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Get provisioning requests
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	GetProvisioningRequests(w http.ResponseWriter, r *http.Request, params GetProvisioningRequestsParams)
	// Create a provisioning request
	// (POST /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	CreateProvisioningRequest(w http.ResponseWriter, r *http.Request)
	// Delete a provisioning request
	// (DELETE /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
	// Get the provisioning request
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	GetProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
	// Update a provisioning request
	// (PUT /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProvisioningRequests operation middleware
func (siw *ServerInterfaceWrapper) GetProvisioningRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvisioningRequestsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvisioningRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProvisioningRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) GetProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProvisioningRequest operation middleware
func (siw *ServerInterfaceWrapper) UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provisioningRequestId" -------------
	var provisioningRequestId ProvisioningRequestId

	err = runtime.BindStyledParameterWithOptions("simple", "provisioningRequestId", r.PathValue("provisioningRequestId"), &provisioningRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provisioningRequestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProvisioningRequest(w, r, provisioningRequestId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests", wrapper.GetProvisioningRequests)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests", wrapper.CreateProvisioningRequest)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.DeleteProvisioningRequest)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.GetProvisioningRequest)
	m.HandleFunc("PUT "+options.BaseURL+"/o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId}", wrapper.UpdateProvisioningRequest)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequestsRequestObject struct {
	Params GetProvisioningRequestsParams
}

type GetProvisioningRequestsResponseObject interface {
	VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error
}

type GetProvisioningRequests200JSONResponse []ProvisioningRequest

func (response GetProvisioningRequests200JSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests400ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequests500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequests500ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequestRequestObject struct {
	Body *CreateProvisioningRequestJSONRequestBody
}

type CreateProvisioningRequestResponseObject interface {
	VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error
}

type CreateProvisioningRequest201JSONResponse ProvisioningRequest

func (response CreateProvisioningRequest201JSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest409ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitCreateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
}

type DeleteProvisioningRequestResponseObject interface {
	VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error
}

type DeleteProvisioningRequest200Response struct {
}

func (response DeleteProvisioningRequest200Response) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitDeleteProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
}

type GetProvisioningRequestResponseObject interface {
	VisitGetProvisioningRequestResponse(w http.ResponseWriter) error
}

type GetProvisioningRequest200JSONResponse ProvisioningRequest

func (response GetProvisioningRequest200JSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitGetProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequestRequestObject struct {
	ProvisioningRequestId ProvisioningRequestId `json:"provisioningRequestId"`
	Body                  *UpdateProvisioningRequestJSONRequestBody
}

type UpdateProvisioningRequestResponseObject interface {
	VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error
}

type UpdateProvisioningRequest200JSONResponse ProvisioningRequest

func (response UpdateProvisioningRequest200JSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest400ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest404ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest412ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProvisioningRequest500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateProvisioningRequest500ApplicationProblemPlusJSONResponse) VisitUpdateProvisioningRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /o2ims-infrastructureProvisioning/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureProvisioning/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Get provisioning requests
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	GetProvisioningRequests(ctx context.Context, request GetProvisioningRequestsRequestObject) (GetProvisioningRequestsResponseObject, error)
	// Create a provisioning request
	// (POST /o2ims-infrastructureProvisioning/v1/provisioningRequests)
	CreateProvisioningRequest(ctx context.Context, request CreateProvisioningRequestRequestObject) (CreateProvisioningRequestResponseObject, error)
	// Delete a provisioning request
	// (DELETE /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	DeleteProvisioningRequest(ctx context.Context, request DeleteProvisioningRequestRequestObject) (DeleteProvisioningRequestResponseObject, error)
	// Get the provisioning request
	// (GET /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	GetProvisioningRequest(ctx context.Context, request GetProvisioningRequestRequestObject) (GetProvisioningRequestResponseObject, error)
	// Update a provisioning request
	// (PUT /o2ims-infrastructureProvisioning/v1/provisioningRequests/{provisioningRequestId})
	UpdateProvisioningRequest(ctx context.Context, request UpdateProvisioningRequestRequestObject) (UpdateProvisioningRequestResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvisioningRequests operation middleware
func (sh *strictHandler) GetProvisioningRequests(w http.ResponseWriter, r *http.Request, params GetProvisioningRequestsParams) {
	var request GetProvisioningRequestsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvisioningRequests(ctx, request.(GetProvisioningRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvisioningRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProvisioningRequestsResponseObject); ok {
		if err := validResponse.VisitGetProvisioningRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProvisioningRequest operation middleware
func (sh *strictHandler) CreateProvisioningRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateProvisioningRequestRequestObject

	var body CreateProvisioningRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProvisioningRequest(ctx, request.(CreateProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitCreateProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProvisioningRequest operation middleware
func (sh *strictHandler) DeleteProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request DeleteProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProvisioningRequest(ctx, request.(DeleteProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitDeleteProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProvisioningRequest operation middleware
func (sh *strictHandler) GetProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request GetProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProvisioningRequest(ctx, request.(GetProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitGetProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProvisioningRequest operation middleware
func (sh *strictHandler) UpdateProvisioningRequest(w http.ResponseWriter, r *http.Request, provisioningRequestId ProvisioningRequestId) {
	var request UpdateProvisioningRequestRequestObject

	request.ProvisioningRequestId = provisioningRequestId

	var body UpdateProvisioningRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProvisioningRequest(ctx, request.(UpdateProvisioningRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProvisioningRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProvisioningRequestResponseObject); ok {
		if err := validResponse.VisitUpdateProvisioningRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1v8JAAD//wsZWINiPAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
